// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


// Creating a model... The model is a representation of a database table.
// Prisma needs to know what fields a table has, and the types of them.

model Car {
  id         Int      @id @default(autoincrement())
  brand      String
  model      String
  created_at DateTime @default(now())
  bought     Boolean  @default(false)
}

// This model defines 5 fields: id, brand, model, created_at, bought, each with its type, be it Int, String, DataTime, or Boolean.
// `id` has the `@id` attribute which means it's the **primary key**, which tells the database management system to make it unique. 
// And it defaults to a value that's automatically incremented, so whenever we add one new item, it always have a unique integer number that increments: 1, 2, 3, 4...

// NOTE: all fields are by default mandatory (from SQL, it means NOT NULL).
// To make a field optional, you can add a '?' after the type, like this:
// model String?
// age Int?




model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}




// REMEMBER TO RUN 'npx prisma migrate dev' ANY TIME YOU MODIFY THE SCHEMA TO APPLY THE CHANGES TO THE DATABASE   !!!!!!