body {
    background-color: rgb(229, 231, 235);
    font-family: system-ui;
}

div {
    display: grid;
    grid-template-columns: 200px 100px 200px 400px;
    grid-template-rows: 100px 300px 100px;
    column-gap: 25px;       /* Since both gaps for cols and rows are the same, layout could be created using the shorthand property as     gap: 25px;     */
    row-gap: 25px;
}

p {
    border: 1px solid;
    padding: 20px;
    margin: 0;
    text-align: center;
}

.item2 {
    grid-column-start: 2;       /* Shortcut of this layout is     grid-column: 2 / 4;     */
    grid-column-end: 4;
}

.item6 {
    grid-column-start: 3;       /* Another approach is to set the starting column/row and set how many column/row it should occupy */
    grid-column-end: 5;         /* grid-column: 2 / span 2; */
}

.item8 {
    grid-column-start: 2;
    grid-column-end: 5;
}


/* 
Specifying the exact width of each column or row in pixels is not always ideal. You can use fractions. A fraction is a unit of space.
div {
    grid-template-columns: 1fr 1fr 1fr;
}


You can also use percentages, and mix and match fractions, pixels, rem, and percentages:
div {
    grid-template-columns: 3rem 15% 1fr 2fr;
}
*/


p.demo {
    border: 1px dashed;
    border-color: red;
    padding: 40px;
    margin: 0;
    text-align: center;
    background-color: yellow;
}

div.demo {
    display: grid;
    grid-template-columns: 1fr 2fr;
    grid-template-rows: 200px 350px;
    gap: 60px;
    height: 800px;
}